import React, { useState, useEffect } from 'react';
import { FermiEstimation, FermiAssumption } from '../../types';
import { useAppContext } from '../../hooks/useAppContext';
import Button from '../ui/Button';
import Input from '../ui/Input';
import TextArea from '../ui/TextArea';
import Modal from '../ui/Modal';
import Card from '../ui/Card';
import { SparklesIcon } from '../../constants';

interface FermiEstimationFormProps {
  isOpen: boolean;
  onClose: () => void;
  estimationToEdit?: FermiEstimation | null;
}

const initialFormState: Omit<FermiEstimation, 'id' | 'assumptions' | 'aiViabilityAssessment'> = {
  name: '',
  calculationLogic: '',
  estimatedOutcome: '',
};

const FermiEstimationForm: React.FC<FermiEstimationFormProps> = ({ isOpen, onClose, estimationToEdit }) => {
  const { addFermiEstimation, updateFermiEstimation, apiKeyStatus, assessFermiViability, getFermiEstimationById } = useAppContext();
  const [formData, setFormData] = useState<Omit<FermiEstimation, 'id'> & {assumptions?: FermiAssumption[], aiViabilityAssessment?: string}>(
    estimationToEdit || { ...initialFormState, assumptions: [{ id: Date.now().toString(), label: '', value: '' }] }
  );
  const [isAssessing, setIsAssessing] = useState(false);

  useEffect(() => {
    if (estimationToEdit) {
      setFormData(estimationToEdit);
    } else {
      setFormData({ ...initialFormState, assumptions: [{ id: Date.now().toString(), label: '', value: '' }] });
    }
  }, [estimationToEdit, isOpen]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleAssumptionChange = (index: number, field: keyof FermiAssumption, value: string) => {
    setFormData(prev => {
      const newAssumptions = [...(prev.assumptions || [])];
      newAssumptions[index] = { ...newAssumptions[index], [field]: value };
      return { ...prev, assumptions: newAssumptions };
    });
  };

  const addAssumptionField = () => {
    setFormData(prev => ({
      ...prev,
      assumptions: [...(prev.assumptions || []), { id: Date.now().toString(), label: '', value: '' }],
    }));
  };
  
  const removeAssumptionField = (index: number) => {
    setFormData(prev => ({
        ...prev,
        assumptions: (prev.assumptions || []).filter((_, i) => i !== index)
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const estimationDataToSave = {
        name: formData.name,
        assumptions: formData.assumptions || [],
        calculationLogic: formData.calculationLogic,
        estimatedOutcome: formData.estimatedOutcome,
        aiViabilityAssessment: formData.aiViabilityAssessment,
    };

    if (estimationToEdit) {
      updateFermiEstimation({ ...estimationToEdit, ...estimationDataToSave });
    } else {
      // For add, 'id' is generated by context
      const { id, ...restForAdd } = estimationDataToSave as FermiEstimation;
      addFermiEstimation(restForAdd as Omit<FermiEstimation, 'id'>);
    }
    onClose();
  };

  const handleAssessViability = async () => {
    if (!estimationToEdit || !estimationToEdit.id || apiKeyStatus === 'missing') return;
    setIsAssessing(true);
    await assessFermiViability(estimationToEdit.id);
    const updatedEstimation = getFermiEstimationById(estimationToEdit.id); // Re-fetch to get AI assessment
    if (updatedEstimation) {
        setFormData(prev => ({...prev, aiViabilityAssessment: updatedEstimation.aiViabilityAssessment}));
    }
    setIsAssessing(false);
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={estimationToEdit ? 'Edit Fermi Estimation' : 'New Fermi Estimation'} size="lg">
      <form onSubmit={handleSubmit} className="space-y-4">
        <Input
          label="Estimation Name"
          name="name"
          value={formData.name}
          onChange={handleChange}
          placeholder="e.g., 'Year 1 Revenue Projection', 'Market Size Estimate'"
          required
        />
        
        <div>
          <label className="block text-sm font-medium text-neutral-dark mb-1">Assumptions</label>
          {(formData.assumptions || []).map((assumption, index) => (
            <div key={assumption.id || index} className="flex items-center space-x-2 mb-2">
              <Input
                placeholder="Assumption Label (e.g., Avg Price)"
                value={assumption.label}
                onChange={(e) => handleAssumptionChange(index, 'label', e.target.value)}
                className="flex-grow"
              />
              <Input
                placeholder="Value (e.g., $50, 1000 users)"
                value={assumption.value}
                onChange={(e) => handleAssumptionChange(index, 'value', e.target.value)}
                className="flex-grow"
              />
              {(formData.assumptions || []).length > 1 && (
                <Button type="button" variant="danger" size="sm" onClick={() => removeAssumptionField(index)}>&times;</Button>
              )}
            </div>
          ))}
          <Button type="button" variant="outline" size="sm" onClick={addAssumptionField}>+ Add Assumption</Button>
        </div>

        <TextArea
          label="Calculation Logic / Formula"
          name="calculationLogic"
          value={formData.calculationLogic}
          onChange={handleChange}
          rows={2}
          placeholder="Describe how assumptions combine. e.g., '(Avg Price * Number of Customers) - CAC'"
        />
        <Input
          label="Estimated Outcome"
          name="estimatedOutcome"
          value={formData.estimatedOutcome}
          onChange={handleChange}
          placeholder="e.g., '$150,000 Annual Profit', 'Market size: 1.2M users'"
        />

        {estimationToEdit && apiKeyStatus === 'ok' && (
            <div className="pt-2">
                <Button 
                    type="button" 
                    onClick={handleAssessViability} 
                    isAiFeature 
                    isLoading={isAssessing}
                    disabled={isAssessing || !formData.estimatedOutcome.trim()}
                    variant="secondary"
                    className="w-full sm:w-auto"
                >
                    AI Assess Viability
                </Button>
                {formData.aiViabilityAssessment && !isAssessing && (
                    <div className="mt-2 p-3 bg-indigo-50 rounded-md border border-indigo-200">
                        <p className="text-xs font-semibold text-indigo-700">AI Viability Assessment:</p>
                        <p className="text-xs text-indigo-600 whitespace-pre-wrap">{formData.aiViabilityAssessment}</p>
                    </div>
                )}
            </div>
        )}

        <div className="flex justify-end space-x-3 pt-4">
          <Button type="button" variant="outline" onClick={onClose}>Cancel</Button>
          <Button type="submit" variant="primary">{estimationToEdit ? 'Save Changes' : 'Create Estimation'}</Button>
        </div>
      </form>
    </Modal>
  );
};


const FermiEstimationTool: React.FC = () => {
    const { fermiEstimations, deleteFermiEstimation, getFermiEstimationById } = useAppContext();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [estimationToEdit, setEstimationToEdit] = useState<FermiEstimation | null>(null);

    const openModalForNew = () => {
        setEstimationToEdit(null);
        setIsModalOpen(true);
    };

    const openModalForEdit = (id: string) => {
        const estimation = getFermiEstimationById(id);
        if (estimation) {
            setEstimationToEdit(estimation);
            setIsModalOpen(true);
        }
    };
    
    return (
        <Card title="Fermi Estimations & Quick Financials"
            actions={
                <Button onClick={openModalForNew} size="sm" className="w-full sm:w-auto">New Estimation</Button>
            }
        >
            <p className="text-sm text-gray-800 mb-4">
                Use Fermi estimations to quickly check if your business model "works on paper" with rough calculations.
            </p>
            {fermiEstimations.length === 0 ? (
                <p className="text-center text-gray-800 py-4">No Fermi estimations created yet.</p>
            ) : (
                <div className="space-y-4">
                    {fermiEstimations.map(est => (
                        <Card key={est.id} title={<span className="text-neutral-dark">{est.name}</span>} className="bg-gray-50"
                            actions={
                                <div className="flex flex-wrap gap-2">
                                    <Button size="sm" variant="outline" onClick={() => openModalForEdit(est.id)}>Edit</Button>
                                    <Button size="sm" variant="danger" onClick={() => confirm('Delete estimation?') && deleteFermiEstimation(est.id)}>Delete</Button>
                                </div>
                            }
                        >
                            <div className="text-sm space-y-1 text-neutral-dark">
                                <p><strong className="text-neutral-dark">Outcome:</strong> {est.estimatedOutcome}</p>
                                <p><strong className="text-neutral-dark">Logic:</strong> {est.calculationLogic}</p>
                                <div>
                                    <strong className="text-neutral-dark">Assumptions:</strong>
                                    <ul className="list-disc list-inside ml-4">
                                        {est.assumptions.map(a => <li key={a.id}>{a.label}: {a.value}</li>)}
                                    </ul>
                                </div>
                                {est.aiViabilityAssessment && (
                                     <div className="mt-2 pt-2 border-t border-gray-200">
                                        <p className="text-xs font-semibold text-indigo-700 flex items-center"><SparklesIcon className="h-4 w-4 mr-1 text-yellow-400"/>AI Viability Assessment:</p>
                                        <p className="text-xs text-indigo-600 whitespace-pre-wrap">{est.aiViabilityAssessment}</p>
                                    </div>
                                )}
                            </div>
                        </Card>
                    ))}
                </div>
            )}
            {isModalOpen && (
                <FermiEstimationForm
                    isOpen={isModalOpen}
                    onClose={() => setIsModalOpen(false)}
                    estimationToEdit={estimationToEdit}
                />
            )}
        </Card>
    );
};

export default FermiEstimationTool;
